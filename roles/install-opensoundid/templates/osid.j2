#!/bin/bash

export JAVA_HOME=/usr/lib/jvm/java-11-openjdk

set -e

function display_usage { 
	echo "osid --all"  
	echo "osid -rma|--RMArff: Remove all ARFF files generated by make feature step"
	echo "osid -cdb|--createDatabase: Create database"
	echo "osid -cl|--classification: Classification step"
	echo "osid -md|--MakeDataset : Transform MP3 to WAV and generate JSON files"
	echo "osid -mf|--MakeFeatures : Generate ARFF files and spectogram images"
	echo "osid -h|--help"
	echo "osid -rmj|--RMJson : Remove JSON files"
	echo "osid -m|--Metadata : Generate metadata"
	echo "osid -rmm|--RMModel: Remove CNN Models"
	echo "osid -cp|--compile : Compile java programs with avx2 support"
	echo "osid -cpavx2|--compile_avx2 : Compile java programs with avx2 support"
	echo "osid -cpavx512|--compile_avx512 : Compile java programs with avx512 support"
	echo "osid -cponednn-avx2|--compile_onednn-avx2 : Compile java programs with onednn avx2 support"
	echo "osid -cponednn-avx512|--compile_onednn-avx512 : Compile java programs with onednn avx512 support"
	echo "osid -cpcuda-11.2|--compile_cuda-11.2 : Compile java programs with Cuda 11.2 support"
	echo "osid -udb|--updateDB : Update database"
	echo "osid -t|--training : training step"
	echo "osid -rmw|--RMWav : Remove all WAV files" 
	exit 1
} 

if [ "$#" -lt 1 ]; then
    display_usage
fi

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -rma|--RMArff)
    RMARFF=true
    shift # past argument
    ;;    
    -cdb|--createDatabase)
    CREATEDATABASE=true
    shift # past argument
    ;;    
    -cl|--classification)
    CLASSIFICATION=true
    shift # past argument
    ;;
    -md|--MakeDataset)
    MAKEDATASET=true
    shift # past argument
    ;;
    -mf|--MakeFeatures)
    MAKEFEATURES=true
    shift # past argument
    ;;
    -h|--help)
    display_usage
    shift # past argument
    ;;
    -rmj|--RMJson)
    RMJSON=true
    shift # past argument
    ;;
    -m|--Metadata)
    METADATA=true
    shift # past argument
    ;;
    -rmm|--RMModel)
    RMMODEL=true
    shift # past argument
    ;;
    -cp|--compile)
    COMPILE=true
    MVN_PROFILE=avx2
    shift # past argument
    ;;
    -cpavx2|--compile_avx2)
    COMPILE=true
    MVN_PROFILE=avx2
    shift # past argument
    ;;
    -cpavx512|--compile_avx512)
    COMPILE=true
    MVN_PROFILE=avx512
    shift # past argument
    ;;
    -cponednn-avx2|--compile_onednn-avx2)
    COMPILE=true
    MVN_PROFILE=onednn-avx2
    shift # past argument
    ;;
    -cponednn-avx512|--compile_onednn-avx512)
    COMPILE=true
    MVN_PROFILE=onednn-avx512
    shift # past argument
    ;;   
    -cpcuda-11.2|--compile_cuda-11.2)
    COMPILE=true
    MVN_PROFILE=cuda-11.2
    shift # past argument
    ;;   
    -t|--training)
    TRAINING=true
    shift # past argument
    ;;
    -udb|--updateDB)
    UPDATEDB=true
    shift # past argument
    ;;
    -rmw|--RMWav)
    RMWAV=true
    shift # past argument
    ;;
    --all)
    RMARFF=true
    CREATEDATABASE=true
    CLASSIFICATION=true
    MAKEDATASET=true
    MAKEFEATURES=true
    RMJSON=true
    METADATA=true
    RMMODEL=true
    COMPILE=true
    TRAINING=true
    UPDATEDB=true
    RMWAV=true
    shift # past argument
    ;;
    *)    # unknown option
    display_usage
    shift # past argument
    ;;
esac
done

TMPDIR=$(mktemp -d);
ROOT_DIR={{ openSoundID_directory }}/
ANSIBLE_DIR={{ openSoundID_directory }}/ansible

RESULT_DIR={{ openSoundID_directory }}/results/$(date '+%Y-%m-%d-%H:%M:%S')
mkdir -p ${RESULT_DIR}

cd ${ROOT_DIR}

#compile
if [ "${COMPILE}" = true ] ; then
   pushd  {{ openSoundID_directory }}/javasrc/Engine
   mvn -DskipTests package -Djavacpp.platform=linux-x86_64 -P ${MVN_PROFILE}
   popd
   cp {{ openSoundID_directory }}/javasrc/Engine/export/engine-1.0.0-SNAPSHOT.jar lib/
fi

#create database
if [ "${CREATEDATABASE}" = true ] ; then
   ./bin/createDatabase.sh
fi

#download metadata and make database file
if [ "${METADATA}" = true ] ; then

   
   pushd  ${ANSIBLE_DIR}/ansible-retrieve-metadata
   ansible-playbook playbook-retrieve-metadata.yml -e root_dir=${ROOT_DIR}
   popd

   #populate database
  ./bin/populateDatabase.sh

  #json metadata to database
  ${JAVA_HOME}/bin/java -classpath "lib/engine-1.0.0-SNAPSHOT.jar:properties"  org.opensoundid.xenocanto.XenoCantoRecord

  #Insert Noise records to database
  ${JAVA_HOME}/bin/java -classpath "lib/engine-1.0.0-SNAPSHOT.jar:properties"  org.opensoundid.noise.NoiseRecords

  #make inventory File
  ${JAVA_HOME}/bin/java -classpath "lib/engine-1.0.0-SNAPSHOT.jar:properties"  org.opensoundid.ml.Inventory

fi

#Remove ARFF and spectogramns files
if [ "${RMARFF}" = true ] ; then
   find {{ openSoundID_directory }}/dataset/training/FeaturesDirectory -name "*.arff.gz" -delete
   find {{ openSoundID_directory }}/dataset/training/spectrogramsDirectory -name "*.png" -delete
   find {{ openSoundID_directory }}/dataset/test-xcalso/FeaturesDirectory -name "*.arff.gz" -delete
   find {{ openSoundID_directory }}/dataset/test-xcalso/spectrogramsDirectory -name "*.png" -delete
fi

#Remove JSON files
if [ "${RMJSON}" = true ] ; then
   find {{ openSoundID_directory }}/dataset/training/JSONDirectory -name "*.json" -delete
   find {{ openSoundID_directory }}/dataset/test-xcalso/JSONDirectory -name "*.json" -delete
fi

#Remove WAV files
if [ "${RMWAV}" = true ] ; then
   find {{ openSoundID_directory }}/dataset/training/WAVDirectory -name "*.wav" -delete
   find {{ openSoundID_directory }}/dataset/test-xcalso/WAVDirectory -name "*.wav" -delete
fi

#Make dataset
if [ "${MAKEDATASET}" = true ] ; then
 
   #download wave file and make dataset for training dataset
   pushd  ${ANSIBLE_DIR}/ansible-make-datasets
   ansible-playbook playbook-make-training-datasets.yml -e root_dir=${ROOT_DIR}
   popd

   #download wave file and make dataset file for test dataset
   pushd  ${ANSIBLE_DIR}/ansible-make-datasets
   ansible-playbook playbook-make-test-datasets.yml -e root_dir=${ROOT_DIR}
   popd

fi

cp {{ openSoundID_directory }}/properties/opensoundid.properties ${RESULT_DIR}
cp {{ openSoundID_directory }}/bin/audiotofeatures.py ${RESULT_DIR}

#update database
if [ "${UPDATEDB}" = true ] ; then
   ./bin/updateDatabase.sh
fi

#Make CNN Features
if [ "${MAKEFEATURES}" = true ] ; then
   ${JAVA_HOME}/bin/java -Xmx16g -classpath "lib/engine-1.0.0-SNAPSHOT.jar:properties" org.opensoundid.ml.CNNFeatures
fi

#Remove MODEL files
if [ "${RMMODEL}" = true ] ; then
   rm -f {{ openSoundID_directory }}/model/*.bin
fi

#CNN Training
if [ "${TRAINING}" = true ] ; then
   ${JAVA_HOME}/bin/java -Xmx1048m -Dorg.bytedeco.javacpp.maxbytes=22G -Dorg.bytedeco.javacpp.maxphysicalbytes=24G -classpath "lib/engine-1.0.0-SNAPSHOT.jar:properties" org.opensoundid.ml.CNNTraining -classpath "lib/engine-1.0.0-SNAPSHOT.jar:properties" org.opensoundid.ml.CNNTraining
fi

#MAKE Classification
if [ "${CLASSIFICATION}" = true ] ; then
   cp {{ openSoundID_directory }}/dataset/results/test-200.arff $TMPDIR
   ${JAVA_HOME}/bin/java -Xmx16g -classpath "lib/engine-1.0.0-SNAPSHOT.jar:properties" org.opensoundid.ml.CNNClassification --arffTestDirectory=$TMPDIR --spectrogramsDirectory={{ openSoundID_directory }}/dataset/training/spectrogramsDirectory
   rm -f $TMPDIR/testalso-500.arff
   
   cp {{ openSoundID_directory }}/dataset/results/testalso-500.arff $TMPDIR
   ${JAVA_HOME}/bin/java -Xmx16g -classpath "lib/engine-1.0.0-SNAPSHOT.jar:properties" org.opensoundid.ml.CNNClassification --arffTestDirectory=$TMPDIR --spectrogramsDirectory={{ openSoundID_directory }}/dataset/test-xcalso/spectrogramsDirectory
fi

if [ -f "{{ openSoundID_directory }}/logs/openSoundID.log" ] ; then
   cp {{ openSoundID_directory }}/logs/openSoundID.log  ${RESULT_DIR}
fi
rm -rf $TMPDIR
